<?php
/** @var \Contestio\Connect\ViewModel\RouteChecker $viewModel */
$viewModel = $block->getData('view_model');

if ($viewModel->isContestioRoute() === false) {
  // If not contestio route, do not load React app
  return;
}

/** @var \Contestio\Connect\Block\React $block */
$iframeUrl = $block->getIframeUrl();
$queryParams = $block->getQueryParams();
?>

<div class="contestio-container">
  <div id="contestio-root">
    <iframe
      src="<?php echo $iframeUrl; ?><?php echo $queryParams; ?>"
      width="100%"
      height="100%"
      frameborder="0"
      allowfullscreen
      class="contestio-iframe">
    </iframe>
  </div>
</div>

<style>
  /* Enlarge the container */
  main#MainContent > section > div,
  main#maincontent {
    max-width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
  }

  /* Remove default margins/paddings */
  main#MainContent > section {
    padding: 0 !important;
    margin: 0 !important;
  }

  /* Remove the title if present */
  main#MainContent > section > div > h1.main-page-title {
    display: none;
  }

  /* Increase default navbar z-index */
  .section-header.shopify-section-group-header-group {
    z-index: 100 !important;
  }

  .contestio-container {
    width: 100%;
    height: calc(100vh - 100px); /* Hauteur de la fenÃªtre moins navbar */
  }

  .contestio-iframe {
    width: 100%;
    height: 100%; /* Prend toute la hauteur du conteneur parent */
    border: none;
  }

  #contestio-root {
    height: 100%;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('.contestio-container');
    const header = document.querySelector('header.page-header');
    const iframe = document.querySelector('.contestio-iframe');

    // Get 'l' parameter from the current url
    const url = new URL(window.location.href);
    const l = url.searchParams.get('l');

    if (l && l.length > 1) {
      // Add the 'l' parameter to the iframe src (before the ?)
      iframe.src = iframe.src.replace('?', l + '?');
    }

    if (container) {
      function adjustHeight() {
        const windowHeight = window.innerHeight;
        const newHeight = windowHeight - (header ? header.offsetHeight : 0); // Remove the header height
        container.style.height = `${newHeight}px`;
      }

      // Adjust the height initially
      adjustHeight();

      // Adjust the height when the window is resized
      window.addEventListener('resize', adjustHeight);
    }

    window.addEventListener('message', (event) => {
      if (event.origin === new URL(iframe.src).origin) {
        const { pathname } = event.data;

        // Replace 'l' variable from the current url with the pathname if it's different
        const url = new URL(window.location.href);
        if (url.searchParams.get('l') !== pathname) {
          // Delete the 'l' parameter
          url.searchParams.delete('l');
          if (pathname !== '' && pathname !== '/') {
            // Add the new parameter without encoding
            const newUrl = url.toString() + (url.toString().includes('?') ? '&' : '?') + 'l=' + pathname;
            history.pushState(null, null, newUrl);
          } else {
            history.pushState(null, null, url.toString());
          }
        }
      }
    });    
  });
</script>
