<?php
/** @var \Contestio\Connect\ViewModel\RouteChecker $viewModel */
$viewModel = $block->getData('view_model');

if ($viewModel->isContestioRoute() === false) {
  return;
}

/** @var \Contestio\Connect\Block\React $block */
$iframeUrl = $block->getIframeUrl();
$queryParams = $block->getQueryParams();
?>

<style>
  /* Enlarge the container */
  main#maincontent {
    padding: 0 !important;
    max-width: 1400px !important;
    margin: 0 auto !important;
  }

  /* Make the container flex */
  .page-main>.columns,
  .page-main>.columns>.column.main {
    display: flex !important;
    width: 100% !important;
    max-width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
  }
</style>

<div class="contestio-container">
  <div class="contestio-loading" id="contestio-loading"></div>

  <!-- ✅ FIX: Pas de src initial sur l'iframe -->
  <iframe 
    id="contestio-iframe" 
    data-url="<?php echo $iframeUrl; ?><?php echo $queryParams; ?>"
    width="100%" 
    height="100%"
    frameborder="0" 
    allowfullscreen 
    sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox"
    class="contestio-iframe contestio-hidden">
  </iframe>
</div>

<script>
// ✅ COORDINATION: Garder contestioGlobal pour contestio.js
if (typeof window.contestioGlobal === 'undefined') {
  window.contestioGlobal = {
    iframeReady: false,
    customerDataLoaded: false,
    listenersSetup: false,
    callbacks: []
  };
}

(function() {
  const startTime = Date.now();
  const log = (msg, data = null) => {
    const timestamp = Date.now() - startTime;
    if (data) {
      console.log(`🍎 [${timestamp}ms] ${msg}`, data);
    } else {
      console.log(`🍎 [${timestamp}ms] ${msg}`);
    }
  };
  
  // ✅ LOGS: État initial
  log('=== CONTESTIO INIT START ===');
  log('User Agent:', navigator.userAgent);
  log('Is Safari iOS:', /Safari/.test(navigator.userAgent) && /iPhone|iPad/.test(navigator.userAgent));
  
  // ✅ PROTECTION: Variable pour éviter le double chargement
  let iframeLoaded = false;
  
  function init() {
    log('Init function called');
    log('contestioGlobal state:', window.contestioGlobal);
    
    const loading = document.getElementById('contestio-loading');
    const iframe = document.getElementById('contestio-iframe');
    
    if (!iframe || !loading) {
      log('❌ Elements not found', { iframe: !!iframe, loading: !!loading });
      return;
    }

    // ✅ LOGS: État de l'iframe
    log('Iframe initial state:', {
      src: iframe.src,
      dataUrl: iframe.getAttribute('data-url'),
      className: iframe.className
    });

    // ✅ PROTECTION: Vérifier si l'iframe a déjà un src
    if (iframe.src && iframe.src !== 'about:blank') {
      log('⚠️ Iframe already has src, aborting to prevent double load');
      return;
    }

    // ✅ FIX SIMPLE: Récupérer l'URL de base depuis data-url
    const baseUrl = iframe.getAttribute('data-url');
    log('Base URL from data-url:', baseUrl);
    
    // ✅ LOGS: Début du fetch
    log('Starting customerData fetch...');
    const fetchStartTime = Date.now();
    
    // Récupérer les données utilisateur
    fetch('/contestio/ajax/customerData', {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Accept': 'application/json',
      }
    })
      .then(response => {
        log('CustomerData response:', {
          status: response.status,
          duration: Date.now() - fetchStartTime + 'ms'
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        return response.json();
      })
      .then(data => {
        log('Customer data parsed:', data);
        
        // ✅ COORDINATION: Marquer les données comme chargées
        window.contestioGlobal.customerDataLoaded = true;
        
        // ✅ PROTECTION: Vérifier encore une fois
        if (iframeLoaded || (iframe.src && iframe.src !== 'about:blank')) {
          log('⚠️ Iframe already loaded, aborting');
          return;
        }
        
        // Construire l'URL finale avec tous les paramètres
        let finalUrl = baseUrl;
        
        if (data.customer_id && data.customer_email) {
          log('✅ User is connected - adding params');
          const separator = baseUrl.includes('?') ? '&' : '?';
          finalUrl = `${baseUrl}${separator}customer_id=${encodeURIComponent(data.customer_id)}&customer_email=${encodeURIComponent(data.customer_email)}`;
        } else {
          log('ℹ️ User not connected - using base URL');
        }
        
        // ✅ FIX: Charger l'iframe UNE SEULE FOIS
        iframeLoaded = true;
        
        // Event listener AVANT de définir src
        iframe.onload = function() {
          log('✅ Iframe onload fired');
          
          // Montrer l'iframe
          loading.style.display = 'none';
          iframe.classList.remove('contestio-hidden');
          
          // ✅ COORDINATION: Marquer l'iframe comme prête
          window.contestioGlobal.iframeReady = true;
          log('✅ contestioGlobal.iframeReady set to true');
          
          // ✅ COORDINATION: Attendre un peu puis exécuter les callbacks
          // Plus long délai sur Safari iOS
          const isSafariIOS = /Safari/.test(navigator.userAgent) && /iPhone|iPad/.test(navigator.userAgent);
          const delay = isSafariIOS ? 2000 : 500;
          
          setTimeout(() => {
            log('Executing contestioGlobal callbacks...', {
              callbackCount: window.contestioGlobal.callbacks.length
            });
            
            window.contestioGlobal.callbacks.forEach(callback => {
              try {
                callback();
              } catch (error) {
                log('❌ Callback error:', error);
              }
            });
            window.contestioGlobal.callbacks = [];
          }, delay);
        };
        
        iframe.onerror = function(e) {
          log('❌ Iframe onerror fired', e);
        };
        
        // ✅ LOGS: Définition du src
        log('Setting iframe.src NOW');
        iframe.src = finalUrl;
        
      })
      .catch(error => {
        log('❌ Error in fetch chain:', {
          message: error.message
        });
        
        // ✅ COORDINATION: Marquer comme chargé même en cas d'erreur
        window.contestioGlobal.customerDataLoaded = true;
        
        // En cas d'erreur, charger quand même l'iframe
        if (!iframeLoaded && (!iframe.src || iframe.src === 'about:blank')) {
          log('Loading iframe with base URL due to error');
          iframeLoaded = true;
          iframe.src = baseUrl;
          iframe.onload = function() {
            loading.style.display = 'none';
            iframe.classList.remove('contestio-hidden');
            window.contestioGlobal.iframeReady = true;
            
            // Exécuter les callbacks
            setTimeout(() => {
              window.contestioGlobal.callbacks.forEach(callback => {
                try { callback(); } catch (e) { log('❌ Callback error:', e); }
              });
              window.contestioGlobal.callbacks = [];
            }, 500);
          };
        }
      });
  }

  // Lancer l'init quand le DOM est prêt
  if (document.readyState === 'loading') {
    log('Waiting for DOMContentLoaded...');
    document.addEventListener('DOMContentLoaded', () => {
      log('DOMContentLoaded fired');
      init();
    });
  } else {
    log('DOM already ready, calling init immediately');
    init();
  }
  
})();
</script>