<?php
/** @var \Contestio\Connect\ViewModel\RouteChecker $viewModel */
$viewModel = $block->getData('view_model');

if ($viewModel->isContestioRoute() === false) {
  return;
}

/** @var \Contestio\Connect\Block\React $block */
$iframeUrl = $block->getIframeUrl();
$queryParams = $block->getQueryParams();
?>

<style>
  /* Enlarge the container */
  main#maincontent {
    padding: 0 !important;
    max-width: 1400px !important;
    margin: 0 auto !important;
  }

  /* Make the container flex */
  .page-main>.columns,
  .page-main>.columns>.column.main {
    display: flex !important;
    width: 100% !important;
    max-width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
  }
</style>

<div class="contestio-container">
  <div class="contestio-loading" id="contestio-loading"></div>

  <!-- ‚úÖ FIX: Pas de src initial sur l'iframe -->
  <iframe 
    id="contestio-iframe" 
    data-url="<?php echo $iframeUrl; ?><?php echo $queryParams; ?>"
    width="100%" 
    height="100%"
    frameborder="0" 
    allowfullscreen 
    sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox"
    class="contestio-iframe contestio-hidden">
  </iframe>
</div>

<script>
(function() {
  const startTime = Date.now();
  const log = (msg, data = null) => {
    const timestamp = Date.now() - startTime;
    if (data) {
      console.log(`üçé [${timestamp}ms] ${msg}`, data);
    } else {
      console.log(`üçé [${timestamp}ms] ${msg}`);
    }
  };
  
  // ‚úÖ LOGS: √âtat initial
  log('=== CONTESTIO INIT START ===');
  log('User Agent:', navigator.userAgent);
  log('Is Safari iOS:', /Safari/.test(navigator.userAgent) && /iPhone|iPad/.test(navigator.userAgent));
  
  // ‚úÖ PROTECTION: Variable pour √©viter le double chargement
  let iframeLoaded = false;
  window.contestioDebug = window.contestioDebug || {};
  
  function init() {
    log('Init function called');
    log('Window location:', window.location.href);
    
    const loading = document.getElementById('contestio-loading');
    const iframe = document.getElementById('contestio-iframe');
    
    if (!iframe || !loading) {
      log('‚ùå Elements not found', { iframe: !!iframe, loading: !!loading });
      return;
    }

    // ‚úÖ LOGS: √âtat de l'iframe
    log('Iframe initial state:', {
      src: iframe.src,
      dataUrl: iframe.getAttribute('data-url'),
      className: iframe.className,
      readyState: iframe.readyState
    });

    // ‚úÖ PROTECTION: V√©rifier si l'iframe a d√©j√† un src
    if (iframe.src && iframe.src !== 'about:blank') {
      log('‚ö†Ô∏è Iframe already has src, aborting to prevent double load');
      log('Current src:', iframe.src);
      return;
    }

    // ‚úÖ FIX SIMPLE: R√©cup√©rer l'URL de base depuis data-url
    const baseUrl = iframe.getAttribute('data-url');
    log('Base URL from data-url:', baseUrl);
    
    if (!baseUrl) {
      log('‚ùå No base URL found in data-url attribute');
      return;
    }
    
    // ‚úÖ LOGS: D√©but du fetch
    log('Starting customerData fetch...');
    const fetchStartTime = Date.now();
    
    // R√©cup√©rer les donn√©es utilisateur
    fetch('/contestio/ajax/customerData', {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Accept': 'application/json',
      }
    })
      .then(response => {
        log('CustomerData response received:', {
          status: response.status,
          ok: response.ok,
          headers: response.headers.get('content-type'),
          fetchDuration: Date.now() - fetchStartTime + 'ms'
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        return response.json();
      })
      .then(data => {
        log('Customer data parsed:', data);
        
        // ‚úÖ PROTECTION: V√©rifier encore une fois
        if (iframeLoaded) {
          log('‚ö†Ô∏è Iframe already loaded (flag check), aborting');
          return;
        }
        
        if (iframe.src && iframe.src !== 'about:blank') {
          log('‚ö†Ô∏è Iframe already has src (double check), aborting');
          log('Current src:', iframe.src);
          return;
        }
        
        // Construire l'URL finale avec tous les param√®tres
        let finalUrl = baseUrl;
        
        if (data.customer_id && data.customer_email) {
          log('‚úÖ User is connected - adding params');
          const separator = baseUrl.includes('?') ? '&' : '?';
          finalUrl = `${baseUrl}${separator}customer_id=${encodeURIComponent(data.customer_id)}&customer_email=${encodeURIComponent(data.customer_email)}`;
          
          // ‚úÖ LOGS: URL construite
          log('Final URL constructed:', {
            hasCustomerId: !!data.customer_id,
            hasCustomerEmail: !!data.customer_email,
            urlLength: finalUrl.length
          });
        } else {
          log('‚ÑπÔ∏è User not connected - using base URL');
        }
        
        // ‚úÖ LOGS: Avant de d√©finir le src
        log('About to set iframe src...');
        log('iframeLoaded flag:', iframeLoaded);
        
        // ‚úÖ FIX: Charger l'iframe UNE SEULE FOIS avec l'URL compl√®te
        iframeLoaded = true;
        window.contestioDebug.iframeLoadTime = Date.now();
        
        // Event listener AVANT de d√©finir src
        iframe.onload = function() {
          const loadDuration = Date.now() - window.contestioDebug.iframeLoadTime;
          log('‚úÖ Iframe onload fired', {
            loadDuration: loadDuration + 'ms',
            finalUrl: finalUrl.substring(0, 100) + '...'
          });
          
          loading.style.display = 'none';
          iframe.classList.remove('contestio-hidden');
          
          log('‚úÖ Iframe shown successfully');
        };
        
        iframe.onerror = function(e) {
          log('‚ùå Iframe onerror fired', e);
        };
        
        // ‚úÖ LOGS: D√©finition du src
        log('Setting iframe.src NOW');
        iframe.src = finalUrl;
        log('iframe.src has been set');
        
      })
      .catch(error => {
        log('‚ùå Error in fetch chain:', {
          message: error.message,
          stack: error.stack
        });
        
        // En cas d'erreur, charger quand m√™me l'iframe
        if (!iframeLoaded && (!iframe.src || iframe.src === 'about:blank')) {
          log('Loading iframe with base URL due to error');
          iframeLoaded = true;
          iframe.src = baseUrl;
          iframe.onload = function() {
            log('Iframe loaded (fallback)');
            loading.style.display = 'none';
            iframe.classList.remove('contestio-hidden');
          };
        }
      });
  }

  // ‚úÖ LOGS: V√©rification de l'√©tat du DOM
  log('Document readyState:', document.readyState);
  log('Contestio container exists:', !!document.querySelector('.contestio-container'));
  
  // Lancer l'init quand le DOM est pr√™t
  if (document.readyState === 'loading') {
    log('Waiting for DOMContentLoaded...');
    document.addEventListener('DOMContentLoaded', () => {
      log('DOMContentLoaded fired');
      init();
    });
  } else {
    log('DOM already ready, calling init immediately');
    init();
  }
  
  // ‚úÖ LOGS: Surveillance des changements
  window.addEventListener('error', (e) => {
    if (e.target && e.target.tagName === 'IFRAME') {
      log('‚ùå Global iframe error caught:', e);
    }
  }, true);
  
})();
</script>