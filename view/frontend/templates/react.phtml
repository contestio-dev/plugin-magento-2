<?php
/** @var \Contestio\Connect\ViewModel\RouteChecker $viewModel */
$viewModel = $block->getData('view_model');

if ($viewModel->isContestioRoute() === false) {
  // If not contestio route, do not load React app
  return;
}

/** @var \Contestio\Connect\Block\React $block */
$iframeUrl = $block->getIframeUrl();
$queryParams = $block->getQueryParams();

try {
  $metaData = $block->getMetaTags();
} catch (\Exception $e) {
  $metaData = [];
}

if (!is_array($metaData)) {
  $metaData = [];
}

$defaultTitle = __('Contestio customer community');
$defaultDescription = __('Discover contests, surveys and community news powered by Contestio.');

$iframeTitle = isset($metaData['title']) && !empty($metaData['title'])
  ? $block->escapeHtml($metaData['title'])
  : $block->escapeHtml($defaultTitle);

$iframeDescription = isset($metaData['description']) && !empty($metaData['description'])
  ? $block->escapeHtml($metaData['description'])
  : $block->escapeHtml($defaultDescription);

$iframeFullUrl = $block->escapeUrl($iframeUrl . $queryParams);
?>

<style>
  /* Enlarge the container */
  main#maincontent {
    padding: 0 !important;
    max-width: 1400px !important;
    margin: 0 auto !important;
  }

  /* Make the container flex */
  .page-main>.columns,
  .page-main>.columns>.column.main {
    display: flex !important;
    width: 100% !important;
    max-width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
  }

  .contestio-noscript {
    margin-top: 1.5rem;
    padding: 1rem;
    background: #F9FAFB;
    border: 1px solid #E5E7EB;
    border-radius: 8px;
  }

  .contestio-noscript a {
    color: #1D4ED8;
    text-decoration: underline;
  }
</style>

<div class="contestio-seo-intro" hidden>
  <h2><?php /* translators: default Contestio iframe title */ echo $iframeTitle; ?></h2>
  <p><?php /* translators: default Contestio iframe description */ echo $iframeDescription; ?></p>
</div>

<?php if (!empty($metaData['highlights']) && is_array($metaData['highlights'])): ?>
  <div class="contestio-seo-highlights" hidden>
    <ul>
      <?php foreach ($metaData['highlights'] as $highlight): ?>
        <li><?php echo $block->escapeHtml($highlight); ?></li>
      <?php endforeach; ?>
    </ul>
  </div>
<?php endif; ?>

<?php if (!empty($metaData['links']) && is_array($metaData['links'])): ?>
  <div class="contestio-seo-links" hidden>
    <ul>
      <?php foreach ($metaData['links'] as $link): ?>
        <?php
          $href = isset($link['href']) ? $block->escapeUrl($link['href']) : '';
          if (!$href) { continue; }
          $linkText = isset($link['text']) && $link['text'] ? $block->escapeHtml($link['text']) : $iframeTitle;
        ?>
        <li><a href="<?php echo $href; ?>"><?php echo $linkText; ?></a></li>
      <?php endforeach; ?>
    </ul>
  </div>
<?php endif; ?>

<div class="contestio-container">
  <div class="contestio-loading" id="contestio-loading"></div>

  <!-- Pas de src initial sur l'iframe -->
  <iframe 
    id="contestio-iframe" 
    data-contestio-base-url="<?php echo $iframeUrl; ?>"
    data-url="<?php echo $iframeUrl; ?><?php echo $queryParams; ?>"
    width="100%" 
    height="100%"
    loading="lazy"
    frameborder="0" 
    allowfullscreen 
    sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox"
    title="<?php echo $iframeTitle; ?>"
    aria-label="<?php echo $iframeTitle; ?>"
    class="contestio-iframe contestio-hidden">
  </iframe>

</div>

<noscript>
  <div class="contestio-noscript">
    <p>
      <?php echo $block->escapeHtml(__('Activate JavaScript to interact with the Contestio community experience.')); ?>
      <a href="<?php echo $iframeFullUrl; ?>" rel="nofollow">
        <?php echo $block->escapeHtml(__('Access Contestio content')); ?>
      </a>
    </p>
  </div>
</noscript>

<script>
// ContestioGlobal pour contestio.js
if (typeof window.contestioGlobal === 'undefined') {
  window.contestioGlobal = {
    iframeReady: false,
    customerDataLoaded: false,
    listenersSetup: false,
    callbacks: []
  };
}

(function() {
  const startTime = Date.now();
  const log = (msg, data = null) => {
    const timestamp = Date.now() - startTime;
    if (data) {
      console.log(`🍎 [${timestamp}ms] ${msg}`, data);
    } else {
      console.log(`🍎 [${timestamp}ms] ${msg}`);
    }
  };
  
  log('=== CONTESTIO INIT START ===');
  log('User Agent:', navigator.userAgent);
  // log('Is Safari iOS:', /Safari/.test(navigator.userAgent) && /iPhone|iPad/.test(navigator.userAgent));
  
  let iframeInitialized = false;
  let lastPostedCustomerData = null;
  let pendingCustomerData = null;

  const runCallbacks = (delay = 0) => {
    if (!window.contestioGlobal) {
      return;
    }

    const execute = () => {
      log('Executing contestioGlobal callbacks...', {
        callbackCount: window.contestioGlobal.callbacks.length
      });

      window.contestioGlobal.callbacks.forEach(callback => {
        try {
          callback();
        } catch (error) {
          log('Callback error:', error);
        }
      });
      window.contestioGlobal.callbacks = [];
    };

    if (delay > 0) {
      setTimeout(execute, delay);
    } else {
      execute();
    }
  };

  const markIframeReady = (reason, delay = 0) => {
    if (!window.contestioGlobal) {
      return;
    }

    if (!window.contestioGlobal.iframeReady) {
      log(`Marking iframe ready (${reason})`);
      window.contestioGlobal.iframeReady = true;
    }

    runCallbacks(delay);
  };

  const getTargetOrigin = (url) => {
    if (!url) {
      return "*";
    }

    try {
      const parsed = new URL(url);
      if (parsed.origin && parsed.origin !== "null") {
        return parsed.origin;
      }
    } catch (_error) {
      // ignore invalid url
    }

    return "*";
  };

  function init() {
    log('Init function called');
    log('contestioGlobal state:', window.contestioGlobal);
    
    const loading = document.getElementById('contestio-loading');
    const iframe = document.getElementById('contestio-iframe');
    
    if (!iframe || !loading) {
      log('Elements not found', { iframe: !!iframe, loading: !!loading });
      return;
    }

    const baseUrl = iframe.getAttribute('data-url');
    if (!baseUrl) {
      log('No base URL found for iframe');
      return;
    }

    iframe.dataset.contestioBaseUrl = baseUrl;

    const targetOrigin = getTargetOrigin(baseUrl);

    const dispatchPendingCustomerData = () => {
      if (!pendingCustomerData) {
        return;
      }

      if (!iframe.contentWindow) {
        return;
      }

      const normalized = {
        customer_id: pendingCustomerData.customer_id || null,
        customer_email: pendingCustomerData.customer_email || null,
      };

      if (
        lastPostedCustomerData &&
        lastPostedCustomerData.customer_id === normalized.customer_id &&
        lastPostedCustomerData.customer_email === normalized.customer_email
      ) {
        return;
      }

      try {
        iframe.contentWindow.postMessage(
          {
            type: 'contestio-customer-data',
            payload: normalized,
            timestamp: Date.now(),
          },
          targetOrigin
        );
        lastPostedCustomerData = normalized;
        log('Posted customer data to iframe');
      } catch (error) {
        log('Error posting customer data to iframe', error);
      }
    };

    const sendCustomerDataToIframe = (payload) => {
      if (!payload) {
        return;
      }

      pendingCustomerData = {
        customer_id: payload.customer_id || null,
        customer_email: payload.customer_email || null,
      };

      if (
        iframe.dataset.contestioIframeLoaded === 'true' ||
        (window.contestioGlobal && window.contestioGlobal.iframeReady)
      ) {
        dispatchPendingCustomerData();
      }
    };

    const ensureIframeInitialized = () => {
      if (iframeInitialized) {
        return;
      }

      iframeInitialized = true;

      iframe.onload = function() {
        log('Iframe onload fired');
        loading.style.display = 'none';
        iframe.classList.remove('contestio-hidden');
        iframe.dataset.contestioIframeLoaded = 'true';
        dispatchPendingCustomerData();
        const isSafariIOS = /Safari/.test(navigator.userAgent) && /iPhone|iPad/.test(navigator.userAgent);
        const delay = isSafariIOS ? 2000 : 500;
        markIframeReady('load-event', delay);
      };

      iframe.onerror = function(e) {
        log('Iframe onerror fired', e);
        loading.style.display = 'none';
        iframe.classList.remove('contestio-hidden');
        iframe.dataset.contestioIframeLoaded = 'true';
        dispatchPendingCustomerData();
        markIframeReady('load-error', 500);
      };

      if (!iframe.src || iframe.src === 'about:blank') {
        iframe.src = baseUrl;
      }

    };

    ensureIframeInitialized();

    const fetchStartTime = Date.now();    
    // Récupérer les données utilisateur
    fetch('/contestio/ajax/customerData', {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Accept': 'application/json',
      }
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        // Marquer les données comme chargées
        window.contestioGlobal.customerDataLoaded = true;

        ensureIframeInitialized();
        
        if (data && (data.customer_id || data.customer_email)) {
          sendCustomerDataToIframe({
            customer_id: data.customer_id || null,
            customer_email: data.customer_email || null,
          });
        }
      })
      .catch(error => {
        log('Error in fetch chain:', {
          message: error.message
        });
        
        // Marquer comme chargé même en cas d'erreur
        window.contestioGlobal.customerDataLoaded = true;
        ensureIframeInitialized();
      });
  }

  // Lancer l'init quand le DOM est prêt
  if (document.readyState === 'loading') {
    log('Waiting for DOMContentLoaded...');
    document.addEventListener('DOMContentLoaded', () => {
      log('DOMContentLoaded fired');
      init();
    });
  } else {
    log('DOM already ready, calling init immediately');
    init();
  }
  
})();
</script>
