<?php
/** @var \Contestio\Connect\ViewModel\RouteChecker $viewModel */
$viewModel = $block->getData('view_model');

if ($viewModel->isContestioRoute() === false) {
  // If not contestio route, do not load React app
  return;
}

/** @var \Contestio\Connect\Block\React $block */
$iframeUrl = $block->getIframeUrl();
$queryParams = $block->getQueryParams();
?>

<div class="contestio-container">
  <div id="contestio-root">
    <iframe
      src="<?php echo $iframeUrl; ?><?php echo $queryParams; ?>"
      width="100%"
      height="100%"
      frameborder="0"
      allowfullscreen
      class="contestio-iframe">
    </iframe>
  </div>
</div>

<style>
  /* Enlarge the container */
  main#maincontent {
    max-width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
  }

  .contestio-container {
    width: 100%;
    height: calc(100vh - 100px); /* Hauteur de la fenÃªtre moins navbar */
  }

  .contestio-iframe {
    width: 100%;
    height: 100%; /* Prend toute la hauteur du conteneur parent */
    border: none;
  }

  #contestio-root {
    height: 100%;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const mainContent = document.querySelector('#maincontent');
    const container = document.querySelector('.contestio-container');
    const iframe = document.querySelector('.contestio-iframe');

    // Get 'l' parameter from the current url
    const url = new URL(window.location.href);
    const l = url.searchParams.get('l');

    let offset = 0;

    if (l && l.length > 1) {
      // Add the 'l' parameter to the iframe src (before the ?)
      iframe.src = iframe.src.replace('?', l + '?');
    }

    if (container) {
      function adjustHeight() {
        if (mainContent) {
          offset = mainContent.offsetTop;
        }

        const windowHeight = window.innerHeight;
        const newHeight = windowHeight - offset; // Remove the header/navbar height
        
        // Update the iframe height
        container.style.height = `${newHeight}px`;
      }

      // Adjust the height initially
      adjustHeight();

      // Adjust the height when the window is resized
      window.addEventListener('resize', adjustHeight);
    }

    window.addEventListener('message', async (event) => {
      if (event.origin === new URL(iframe.src).origin) {
        const {
          type,
          loginCredentials, // Login route
          pathname, // Update the url with the pathname
          redirectUrl, // Redirect to the url
          clipboardText // Copy the text to the clipboard
        } = event.data;

        if (type === 'login') {
          try {
            // Url = current url without query params
            const url = window.location.href.includes('?') ? window.location.href.split('?')[0] : window.location.href;
            const response = await fetch(url.endsWith('/') ? url + 'login' : url + '/login', {
              method: 'POST',
              body: JSON.stringify({
                username: loginCredentials.username,
                password: loginCredentials.password
              }),
            });

            const data = await response.json();

            // Refresh the page if the login is successful
            if (data.success) {
              window.location.reload();
            } else {
              // Send the error to the iframe
              event.source.postMessage({
                loginResponse: {
                  success: false,
                  message: data.message,
                  data: data
                }
              }, '*');
            }
          } catch (error) {
            console.error('Contestio - Login error', error);

            // Send the error to the iframe
            event.source.postMessage({
              loginResponse: {
                success: false,
                message: "Erreur lors de la connexion",
                data: error
              }
            }, '*');
          }
        } else if (type === 'pathname') {
          // Replace 'l' variable from the current url with the pathname if it's different
          const url = new URL(window.location.href);

          // Delete url.search
          url.search = '';
          
          // Delete l parameter
          url.searchParams.delete('l');
          url.searchParams.delete('u');

          if (pathname !== '' && pathname !== '/') {
            // Add the new parameter without encoding
            const newUrl = url.toString() + (url.toString().includes('?') ? '&' : '?') + 'l=' + pathname;

            // Update the url
            history.pushState(null, null, newUrl);
          } else {
            // Update the url
            history.pushState(null, null, url.toString());
          }
        } else if (type === 'redirect') {
          // Redirect to the url
          window.location.href = redirectUrl;
        } else if (type === 'clipboard') {
          // Copy the text to the clipboard
          navigator.clipboard.writeText(clipboardText);
        }
      }
    });    
  });
</script>
